# To be included by root CMakeLists.txt

####################################
# BINARY AND LIB REQUIREMENT FOR BAL
####################################

####################################
#Find images libraries 
####################################
IF(WEBKIT_USE_IMAGEDECODER_LIBPNG)

    FIND_PACKAGE (PNG REQUIRED)

    IF(PNG_FOUND)
        MESSAGE ("png found with this parameter for libs : ${PNG_LIBRARIES}")
        MESSAGE ("png found with this parameter for cflags : ${PNG_INCLUDE_DIR}")
        SET(LIBRARIES_TO_LINK "${LIBRARIES_TO_LINK};${PNG_LIBRARIES}")
        SET(LIBRARIES_TO_INCLUDE "${LIBRARIES_TO_INCLUDE};${PNG_INCLUDE_DIR}")
        LINK_LIBRARIES(${PNG_LIBRARIES})
    ELSE(PNG_FOUND)
        MESSAGE (FATAL_ERROR "Could not find libpng")
    ENDIF(PNG_FOUND)

ENDIF(WEBKIT_USE_IMAGEDECODER_LIBPNG)



IF(WEBKIT_USE_IMAGEDECODER_LIBJPEG)

    FIND_PACKAGE (JPEG REQUIRED)

    IF(JPEG_FOUND)
        MESSAGE ("jpeg found with this parameter for libs : ${JPEG_LIBRARIES}")
        MESSAGE ("jpeg found with this parameter for cflags : ${JPEG_INCLUDE_DIR}")
        SET(LIBRARIES_TO_LINK "${LIBRARIES_TO_LINK};${JPEG_LIBRARIES}")
        SET(LIBRARIES_TO_INCLUDE "${LIBRARIES_TO_INCLUDE};${JPEG_INCLUDE_DIR}")
        LINK_LIBRARIES(${JPEG_LIBRARIES})
    ELSE(JPEG_FOUND)
        MESSAGE (FATAL_ERROR "Could not find libjpeg")
    ENDIF(JPEG_FOUND)

ENDIF(WEBKIT_USE_IMAGEDECODER_LIBJPEG)

IF(WEBKIT_USE_IMAGEDECODER_LIBUNGIF)
    # FIXME may be ungif instead of gif !
    SET(LIBRARIES_TO_LINK "${LIBRARIES_TO_LINK};gif")
ENDIF(WEBKIT_USE_IMAGEDECODER_LIBUNGIF)


#######################################
# find perl executable
#######################################
FIND_PACKAGE(Perl REQUIRED)

#######################################
# find pkg-config executable
#######################################
FIND_PROGRAM (PKG_CONFIG_EXECUTABLE pkg-config)

IF (NOT PKG_CONFIG_EXECUTABLE)
    MESSAGE (FATAL_ERROR "Could not find pkg-config, cannot create owb without it, on debian you must install pkg-config package")
ENDIF (NOT PKG_CONFIG_EXECUTABLE)

#######################################
# find BISON executable
#######################################
FIND_PROGRAM (BISON_EXECUTABLE bison)

IF (NOT BISON_EXECUTABLE)
    MESSAGE (FATAL_ERROR "Could not find bison, cannot create owb without it, on debian you must install bison package")
ENDIF (NOT BISON_EXECUTABLE)

#######################################
# find flex executable
#######################################
FIND_PROGRAM (FLEX_EXECUTABLE flex)

IF (NOT FLEX_EXECUTABLE)
    MESSAGE (FATAL_ERROR "Could not find flex, cannot create owb without it, on debian you must install flex package")
ENDIF (NOT FLEX_EXECUTABLE)

#######################################
# find GPERF executable
#######################################
FIND_PROGRAM (GPERF_EXECUTABLE gperf)

IF (NOT GPERF_EXECUTABLE)
    MESSAGE (FATAL_ERROR "Could not find gperf, cannot create owb without it, on debian you must install gperf package")
ENDIF (NOT GPERF_EXECUTABLE)

#######################################
#quick search the libcairo is available
#######################################

IF (WEBKIT_USE_GRAPHICS_CAIRO)

    EXEC_PROGRAM ("${PKG_CONFIG_EXECUTABLE} --libs cairo | sed s/-[[:upper:]][[:graph:]]*[[:blank:]]//g | sed s/-l//"
        OUTPUT_VARIABLE LIBCAIRO_LIBS
        RETURN_VALUE ERROR_CODE)

    IF (ERROR_CODE EQUAL 0)
        MESSAGE ("cairo found with this parameter for libs : "${LIBCAIRO_LIBS})
    ELSE (ERROR_CODE EQUAL 0)
        MESSAGE (FATAL_ERROR "libcairo not found, cannot create owb without it, on debian you must install libcairo2-dev package")
    ENDIF (ERROR_CODE EQUAL 0)

    EXEC_PROGRAM ("${PKG_CONFIG_EXECUTABLE} --cflags cairo | sed s/-I// | sed s/\\ .*//g"
        OUTPUT_VARIABLE LIBCAIRO_CFLAGS
        RETURN_VALUE ERROR_CODE)

    IF (ERROR_CODE EQUAL 0)
        MESSAGE ("cairo found with this parameter for cflags : "${LIBCAIRO_CFLAGS})
    ELSE (ERROR_CODE EQUAL 0)
        MESSAGE (FATAL_ERROR "libcairo not found, cannot create owb without it, on debian you must install libcairo2-dev package")
    ENDIF (ERROR_CODE EQUAL 0)

ENDIF (WEBKIT_USE_GRAPHICS_CAIRO)

#######################################
#quick search the libicu is available
#######################################

IF (NOT WEBKIT_USE_BAL_I18N)
    FIND_PROGRAM (ICU_CONFIG_EXECUTABLE icu-config)

    IF (NOT ICU_CONFIG_EXECUTABLE)
        MESSAGE (FATAL_ERROR "Could not find icu-config, cannot create owb without it, on debian you must install libicu34-dev package")
    ENDIF (NOT ICU_CONFIG_EXECUTABLE)

    IF (BUILD_SHARED_LIBS)
        EXEC_PROGRAM ("${ICU_CONFIG_EXECUTABLE} --ldflags-libsonly"
            OUTPUT_VARIABLE LIBICU_LIBS
            RETURN_VALUE ERROR_CODE)
            SEPARATE_ARGUMENTS(LIBICU_LIBS)
    ELSE (BUILD_SHARED_LIBS)
        # static libs for icu begin with 's'
        EXEC_PROGRAM ("${ICU_CONFIG_EXECUTABLE} --ldflags-libsonly | sed 's/-l/-ls/g'"
            OUTPUT_VARIABLE LIBICU_LIBS
            RETURN_VALUE ERROR_CODE)
            SEPARATE_ARGUMENTS(LIBICU_LIBS)
    ENDIF (BUILD_SHARED_LIBS)

    IF (ERROR_CODE EQUAL 0)
        MESSAGE ("icu found with this parameter for libs : ${LIBICU_LIBS}")
        SET(LIBRARIES_TO_LINK ${LIBRARIES_TO_LINK} ${LIBICU_LIBS})
    ELSE (ERROR_CODE EQUAL 0)
        MESSAGE (FATAL_ERROR "libicu not found, cannot create owb without it, on debian you must install libicu34-dev package")
    ENDIF (ERROR_CODE EQUAL 0)

ENDIF (NOT WEBKIT_USE_BAL_I18N)

#######################################
#quick search the libSDL is available
#######################################


IF (WEBKIT_USE_GRAPHICS_SDL OR WEBKIT_USE_EVENTS_SDL)

	FIND_PACKAGE (SDL REQUIRED)
	
	IF(SDL_FOUND)
		MESSAGE ("sdl found with this parameter for libs : ${SDL_LIBRARY}")
		MESSAGE ("sdl found with this parameter for cflags : ${SDL_INCLUDE_DIR}")
		SET(LIBRARIES_TO_LINK ${LIBRARIES_TO_LINK} ${SDL_LIBRARY})
		SET(LIBRARIES_TO_INCLUDE ${LIBRARIES_TO_INCLUDE} ${SDL_INCLUDE_DIR})
	ELSE(SDL_FOUND)
		MESSAGE (FATAL_ERROR "Could not find libSDL")
	ENDIF(SDL_FOUND)

ENDIF (WEBKIT_USE_GRAPHICS_SDL OR WEBKIT_USE_EVENTS_SDL)

IF (WEBKIT_USE_GRAPHICS_SDL)

	FIND_PACKAGE (SDL_gfx REQUIRED)
	
	IF(SDLGFX_FOUND)
		MESSAGE ("sdl_gfx found with this parameter for libs : ${SDLGFX_LIBRARY}")
		MESSAGE ("sdl_gfx found with this parameter for cflags : ${SDLGFX_INCLUDE_DIR}")
		SET(LIBRARIES_TO_LINK ${LIBRARIES_TO_LINK}  ${SDLGFX_LIBRARY})
		SET(LIBRARIES_TO_INCLUDE ${LIBRARIES_TO_INCLUDE} ${SDLGFX_INCLUDE_DIR})
	ELSE(SDLGFX_FOUND)
		MESSAGE (FATAL_ERROR "Could not find SDL GFX")
	ENDIF(SDLGFX_FOUND)

ENDIF (WEBKIT_USE_GRAPHICS_SDL)

#######################################
#search for freetype 
#######################################

IF (WEBKIT_USE_FONTS_FREETYPE)

    FIND_PROGRAM (FREETYPE_CONFIG_EXECUTABLE freetype-config)

    IF (NOT FREETYPE_CONFIG_EXECUTABLE)
        MESSAGE (FATAL_ERROR "Could not find freetype-config. Cannot create owb with freetype support without it. On debian you must install libfreetype6-dev package")
    ENDIF (NOT FREETYPE_CONFIG_EXECUTABLE)

    EXEC_PROGRAM ("${FREETYPE_CONFIG_EXECUTABLE} --cflags | sed s/-I// | sed s/\\ .*//g"
        OUTPUT_VARIABLE LIBFREETYPE_CFLAGS
        RETURN_VALUE ERROR_CODE)
    IF (ERROR_CODE EQUAL 0)
        MESSAGE ("freetype found with this parameter for cflags : ${LIBFREETYPE_CFLAGS}")
        SET(LIBRARIES_TO_INCLUDE ${LIBRARIES_TO_INCLUDE} ${LIBFREETYPE_CFLAGS})
    ELSE (ERROR_CODE EQUAL 0)
        MESSAGE (FATAL_ERROR "libfreetype not found. Cannot create owb with freetype support without it. On debian you must install libfreetype6-dev package")
    ENDIF (ERROR_CODE EQUAL 0)

    EXEC_PROGRAM ("${FREETYPE_CONFIG_EXECUTABLE} --libs | sed s/-[[:upper:]][[:graph:]]*[[:blank:]]//g | sed 's/-l//g' | sed 's/[ ]/;/g'"
        OUTPUT_VARIABLE LIBFREETYPE_LIBS
        RETURN_VALUE ERROR_CODE)
    IF (ERROR_CODE EQUAL 0)
        MESSAGE ("freetype found with this parameter for libs : ${LIBFREETYPE_LIBS}")
        SET(LIBRARIES_TO_LINK ${LIBRARIES_TO_LINK} ${LIBFREETYPE_LIBS})
    ELSE (ERROR_CODE EQUAL 0)
        MESSAGE (FATAL_ERROR "libfreetype not found. Cannot create owb with freetype support without it. On debian you must install libfreetype6-dev package")
    ENDIF (ERROR_CODE EQUAL 0)

#######################################
#search for fontconfig
#######################################

    EXEC_PROGRAM ("${PKG_CONFIG_EXECUTABLE} --libs fontconfig | sed s/-[[:upper:]][[:graph:]]*[[:blank:]]//g | sed s/-l//"
        OUTPUT_VARIABLE LIBFONTCONFIG_LIBS
        RETURN_VALUE ERROR_CODE)

    IF (ERROR_CODE EQUAL 0)
        SET (LIBRARIES_TO_LINK ${LIBRARIES_TO_LINK} ${LIBFONTCONFIG_LIBS})
        MESSAGE ("fontconfig found with this parameter for libs : "${LIBFONTCONFIG_LIBS})
    ELSE (ERROR_CODE EQUAL 0)
        MESSAGE (FATAL_ERROR "fontconfig not found, cannot create owb without it")
    ENDIF (ERROR_CODE EQUAL 0)
ENDIF (WEBKIT_USE_FONTS_FREETYPE)

#######################################
#quick search the libcurl is available
#######################################

FIND_PROGRAM (CURL_CONFIG_EXECUTABLE curl-config)

IF (NOT CURL_CONFIG_EXECUTABLE)
    MESSAGE (FATAL_ERROR "Could not find curl-config, cannot create owb without it, on debian you must install libcurl3-gnutls-dev package")
ENDIF (NOT CURL_CONFIG_EXECUTABLE)

EXEC_PROGRAM ("${CURL_CONFIG_EXECUTABLE} --libs | sed s/-[[:upper:]][[:graph:]]*[[:blank:]]//g | sed 's/-l//g' | sed 's/[ ]/;/g'"
    OUTPUT_VARIABLE LIBCURL_LIBS
    RETURN_VALUE ERROR_CODE)

IF (ERROR_CODE EQUAL 0)
    MESSAGE ("curl found with this parameter for libs : ${LIBCURL_LIBS}")
    SET(LIBRARIES_TO_LINK ${LIBRARIES_TO_LINK} ${LIBCURL_LIBS})
ELSE (ERROR_CODE EQUAL 0)
    MESSAGE (FATAL_ERROR "libcurl not found, cannot create owb without it, on debian you must install libcurl3-gnutls-dev package")
ENDIF (ERROR_CODE EQUAL 0)

#######################################
#quick search the libxml2 is available
#######################################

IF (WEBKIT_USE_XML_SUPPORT)

    FIND_PROGRAM (XML2_CONFIG_EXECUTABLE xml2-config)

    IF (NOT XML2_CONFIG_EXECUTABLE)
        MESSAGE (FATAL_ERROR "Could not find xml2-config, cannot create owb without it, on debian you must install libxml2-dev package")
    ENDIF (NOT XML2_CONFIG_EXECUTABLE)

    EXEC_PROGRAM ("${XML2_CONFIG_EXECUTABLE} --libs | sed s/-[[:upper:]][[:graph:]]*[[:blank:]]//g | sed 's/-l//g' | sed 's/[ ]/;/g'"
        OUTPUT_VARIABLE LIBXML2_LIBS
        RETURN_VALUE ERROR_CODE)

    IF (ERROR_CODE EQUAL 0)
        MESSAGE ("xml2 found with this parameter for libs : ${LIBXML2_LIBS}")
        SET(LIBRARIES_TO_LINK ${LIBRARIES_TO_LINK} ${LIBXML2_LIBS})
    ELSE (ERROR_CODE EQUAL 0)
        MESSAGE (FATAL_ERROR "libxml2 not found, cannot create owb without it, on debian you must install libxml2-dev package")
    ENDIF (ERROR_CODE EQUAL 0)

    EXEC_PROGRAM ("${XML2_CONFIG_EXECUTABLE} --cflags | sed s/-I// | sed s/\\ .*//g"
        OUTPUT_VARIABLE LIBXML2_CFLAGS
        RETURN_VALUE ERROR_CODE)

    IF (ERROR_CODE EQUAL 0)
        MESSAGE ("xml2 found with this parameter for cflags : ${LIBXML2_CFLAGS}")
        SET(LIBRARIES_TO_INCLUDE ${LIBRARIES_TO_INCLUDE} ${LIBXML2_CFLAGS})
    ELSE (ERROR_CODE EQUAL 0)
        MESSAGE (FATAL_ERROR "libxml2 not found, cannot create owb without it, on debian you must install libxml2-dev package")
    ENDIF (ERROR_CODE EQUAL 0)

ENDIF (WEBKIT_USE_XML_SUPPORT)

#######################################
#quick search the libxslt is available
#######################################

IF (WEBKIT_USE_XSLT_SUPPORT)

FIND_PROGRAM (XSLT_CONFIG_EXECUTABLE xslt-config)

IF (NOT XSLT_CONFIG_EXECUTABLE)
    MESSAGE (FATAL_ERROR "Could not find xslt-config, cannot create owb without it, on debian you must install libxslt1-dev package")
ENDIF (NOT XSLT_CONFIG_EXECUTABLE)

EXEC_PROGRAM ("${XSLT_CONFIG_EXECUTABLE} --libs | sed s/-[[:upper:]][[:graph:]]*[[:blank:]]//g | sed 's/-l//g' | sed 's/[ ]/;/g'"
    OUTPUT_VARIABLE LIBXSLT_LIBS
    RETURN_VALUE ERROR_CODE)

IF (ERROR_CODE EQUAL 0)
    MESSAGE ("xslt found with this parameter for libs : ${LIBXSLT_LIBS}")
    SET(LIBRARIES_TO_LINK ${LIBRARIES_TO_LINK} ${LIBXSLT_LIBS})
ELSE (ERROR_CODE EQUAL 0)
    MESSAGE (FATAL_ERROR "libxslt not found, cannot create owb without it, on debian you must install libxslt1-dev package")
ENDIF (ERROR_CODE EQUAL 0)

ENDIF (WEBKIT_USE_XSLT_SUPPORT)

#######################################
#Specific for N800
#######################################
IF (N800_BUILD)
    EXEC_PROGRAM ("pkg-config" ARGS " --cflags gtk+-2.0 hildon-libs | sed s/-I// | sed 's/ -I/;/g'" OUTPUT_VARIABLE GTK_CFLAGS)
    SET (LIBRARIES_TO_INCLUDE ${LIBRARIES_TO_INCLUDE} ${GTK_CFLAGS})
    EXEC_PROGRAM ("pkg-config" ARGS " --libs gtk+-2.0 hildon-libs" OUTPUT_VARIABLE GTK_LIBS)
    SET (LIBRARIES_TO_LINK ${LIBRARIES_TO_LINK} ${GTK_LIBS})
ENDIF (N800_BUILD)

######################################
#Add -ldl for static link
#Warning: keep it at the end of file!
######################################
IF (NOT BUILD_SHARED_LIBS)
    SET(LIBRARIES_TO_LINK "${LIBRARIES_TO_LINK};dl")	
ENDIF (NOT BUILD_SHARED_LIBS)

