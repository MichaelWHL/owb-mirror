##############################
##############################
##############################
# PROJECT NAME
##############################
##############################
##############################
PROJECT (WebKit)
CMAKE_MINIMUM_REQUIRED (VERSION 2.4.7 FATAL_ERROR)

# Use this to cross-compile or to use a different compiler :
#SET (CMAKE_CXX_COMPILER "distcc")
#SET (CMAKE_C_COMPILER "distcc")
SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake;${CMAKE_MODULE_PATH}")
SET (MESSAGE_NOT_FOUND "not found. Install it to compile owb.")
SET (MESSAGE_DISABLE "Another alternative is to disable the following option:")
SET (MESSAGE_CHOOSE "A possibility is to choose a configuration that does not require")

SET (OWB_DATA "$ENV{HOME}/.owb/conf/" CACHE STRING "Path to store data for owb")
CONFIGURE_FILE (${CMAKE_CURRENT_SOURCE_DIR}/BAL/Includes/owb-config.h.cmake
    ${CMAKE_CURRENT_SOURCE_DIR}/BAL/Includes/owb-config.h
)

#######################################
# Define build options below          #
#######################################

INCLUDE (CMakeDependentOption)

# Global switch fo static build
OPTION (BUILD_SHARED_LIBS "Build OWB with shared libraries." ON)

# Special option for BuildBot, to disable output colorization
OPTION (CMAKE_COLOR_MAKEFILE "Do not colorize compilation output." ON)

# Global switch fo verbose mode
OPTION (CMAKE_VERBOSE_MAKEFILE "Compile Webkit with verbose mode." OFF)

# Global switch to disable tests compilation
OPTION (COMPILE_TESTS "Compile test suite (testbal, jsc...)" ON)

# Support to compute page load time
OPTION (OWBAL_BENCH_LOAD_TIME "display page load time" OFF)

# Global switch for OWBAL support for Mac port
OPTION (OWBAL_PLATFORM_MACPORT "OWBAL support for Mac port" OFF)

# Global switch for OWBAL support for Graphics backend
SET (OWBAL_PLATFORM_GRAPHICS "GTK" CACHE STRING "Graphics support. (GTK/SDL)")

# Global switch for DEBUG support
SET (WEBKIT_DEBUG "DEBUG" CACHE STRING "Compile WebKit with debug support. (DEBUG/DEBUG_GCC3.X/RELEASE)")

# Global switch for Inspector controller
OPTION (WEBKIT_ENABLE_INSPECTOR_CONTROLLER "Compile WebKit with Inspector Controller support." OFF)

# Global switch for XPath support
OPTION (WEBKIT_ENABLE_XPATH "Compile WebKit with XPATH support." ON)

# Global switch for XSLT support
OPTION (WEBKIT_ENABLE_XSLT "Compile WebKit with XSLT support." ON)

# Global switch for EXCEPTIONS support
OPTION (WEBKIT_USE_CC_EXCEPTIONS "Compile WebKit with exceptions support." OFF)

# Global switch for PIC support
OPTION (WEBKIT_USE_CC_PIC "Compile WebKit with PIC support." ON)

# Global switch for RTTI support
OPTION (WEBKIT_USE_CC_RTTI "Compile WebKit with rtti support." OFF)

# Offline web application
CMAKE_DEPENDENT_OPTION (WEBKIT_OFFLINE_WEB_APPLICATIONS "HTML5 offline web applications support." ON
    WEBKIT_USE_DATABASE OFF
)

# Cross Document messaging
OPTION (WEBKIT_USE_CROSS_DOCUMENT_MESSAGING "HTML5 cross-document messaging." ON)

# Database for HTML5 support
OPTION (WEBKIT_USE_DATABASE "HTML5 client-side database storage support" ON)

# HTML5 client-side session and persistent storage
CMAKE_DEPENDENT_OPTION (WEBKIT_USE_DOM_STORAGE "HTML5 client-side session and persistent storage." ON
    WEBKIT_USE_DATABASE OFF
)

# FileSystem support
SET (WEBKIT_USE_FILESYSTEM "GTK" CACHE STRING "FileSystem support. (GTK/POSIX)")

# Font support
SET (WEBKIT_USE_FONTS "GTK" CACHE STRING "fonts support. (GTK/FREETYPE/EMBEDDED)")

# HTML5 video support
OPTION (WEBKIT_USE_HTML5_VIDEO "Compile WebKit with html5 video support." ON)

# Internationalization support
SET (WEBKIT_USE_I18N "ICU" CACHE STRING "Internationalization support. (ICU/GENERIC)")

# Global switch for plugins support
OPTION (WEBKIT_USE_NPAPI "Compile WebKit with Netscape Plugins API support." OFF)

# Global switch for SVG support
OPTION (WEBKIT_USE_SVG "Compile WebKit with SVG support." ON)

# Systemtime support
SET (WEBKIT_USE_SYSTEMTIME "GTK" CACHE STRING "SystemTime support. (GTK/LINUX)")

# Threading support
SET (WEBKIT_USE_THREADING "GTK" CACHE STRING "Threading support. (GTK/PTHREADS/NONE)")

# Worker support
#OPTION (WEBKIT_USE_WORKERS "Enable workers" OFF)

# Global switch for uClibc
OPTION (WEBKIT_USE_UCLIBC "Link OWB with uClibc instead of glibc." OFF)

# Accessibility
OPTION (WEBKIT_USE_ACCESSIBILITY "Compile WebKit with Accessibility support." ON)

# MULTITHREADING
OPTION (WEBKIT_USE_MULTIPLE_THREADS "Compile Webkit with multiple threads support." OFF)

# Use HILDON on N800
OPTION (WEBKIT_USE_N800_HILDON "Compile Webkit with Maemo HILDON support for N8xx." OFF)

#use WML
OPTION (WEBKIT_USE_WML "Compile Webkit with wml support" OFF) 

#use Squirrel Fish extrem
OPTION (WEBKIT_USE_SQUIRREL_FISH_EXTREM "Compile Webkit with Squirrel fish extrem on X86 (EXPERIMENTAL)" OFF) 

#use Worker
OPTION (WEBKIT_USE_WORKERS "Compile Webkit with workers support" OFF) 

#use GEOLOCATION
OPTION (WEBKIT_USE_GEOLOCATION "Compile Webkit with geolocation support" OFF) 

INCLUDE (CMakeListsCustomer.txt OPTIONAL)

#######################################
# Required packages check             #
#######################################

INCLUDE (CheckLibraryExists)
check_library_exists(pthread pthread_attr_get_np "" HAVE_PTHREAD_ATTR_GET_NP)
check_library_exists(pthread pthread_getattr_np "" HAVE_PTHREAD_GETATTR_NP)

# Various mandatory packages to build
FIND_PACKAGE (PkgConfig REQUIRED)
IF (NOT PKG_CONFIG_FOUND)
    MESSAGE (FATAL_ERROR "pkg-config ${MESSAGE_NOT_FOUND}")
ENDIF (NOT PKG_CONFIG_FOUND)

FIND_PACKAGE (Perl REQUIRED)
IF (NOT PERL_FOUND)
    MESSAGE (FATAL_ERROR "perl ${MESSAGE_NOT_FOUND}")
ENDIF (NOT PERL_FOUND)

FIND_PROGRAM (BISON_EXECUTABLE bison)
IF (NOT BISON_EXECUTABLE)
    MESSAGE (FATAL_ERROR "bison ${MESSAGE_NOT_FOUND}")
ENDIF (NOT BISON_EXECUTABLE)

FIND_PROGRAM (FLEX_EXECUTABLE flex)
IF (NOT FLEX_EXECUTABLE)
    MESSAGE (FATAL_ERROR "flex ${MESSAGE_NOT_FOUND}")
ENDIF (NOT FLEX_EXECUTABLE)

FIND_PROGRAM (GPERF_EXECUTABLE gperf)
IF (NOT GPERF_EXECUTABLE)
    MESSAGE (FATAL_ERROR "gperf ${MESSAGE_NOT_FOUND}")
ENDIF (NOT GPERF_EXECUTABLE)

# Mandatory package for WebCore
PKG_CHECK_MODULES (XML2 libxml-2.0)
IF (NOT XML2_FOUND)
    MESSAGE (FATAL_ERROR "libxml2 ${MESSAGE_NOT_FOUND}")
ENDIF (NOT XML2_FOUND)

IF (WEBKIT_ENABLE_XSLT)
    PKG_CHECK_MODULES (XSLT libxslt)
    IF (NOT XSLT_FOUND)
        MESSAGE (FATAL_ERROR "libxslt ${MESSAGE_NOT_FOUND}")
    ENDIF (NOT XSLT_FOUND)
ENDIF (WEBKIT_ENABLE_XSLT)

# Mandatory package for image decoder
PKG_CHECK_MODULES (PNG12 REQUIRED libpng12)
#FIND_LIBRARY (JPEG_LIBRARY jpeg)
#STRING(REGEX REPLACE lib/lib[a-z;A-Z]*.so include
#	JPEG_INCLUDE_DIR
#	${JPEG_LIBRARY}
#)
FIND_PACKAGE (JPEG QUIET REQUIRED)

# Mandatory package for network
PKG_CHECK_MODULES (CURL libcurl)
IF (NOT CURL_FOUND)
    MESSAGE (FATAL_ERROR "libcurl ${MESSAGE_NOT_FOUND}")
ENDIF (NOT CURL_FOUND)

IF (COMPILE_TESTS)
    ENABLE_TESTING ()
    PKG_CHECK_MODULES (CPPUNIT cppunit)
    IF (NOT CPPUNIT_FOUND)
        MESSAGE (FATAL_ERROR "cppunit ${MESSAGE_NOT_FOUND}\n${MESSAGE_DISABLE} COMPILE_TESTS.")
    ENDIF (NOT CPPUNIT_FOUND)
# FIXME find a way to check readline, dependency of jsc
ENDIF (COMPILE_TESTS)

IF (${OWBAL_PLATFORM_GRAPHICS} STREQUAL "GTK")
    PKG_CHECK_MODULES (CAIRO cairo)
    IF (NOT CAIRO_FOUND)
        MESSAGE (SEND_ERROR "cairo ${MESSAGE_NOT_FOUND}\n${MESSAGE_CHOOSE} cairo library.")
    ENDIF (NOT CAIRO_FOUND)
    PKG_CHECK_MODULES (GTK2 gtk+-2.0)
    IF (NOT GTK2_FOUND)
        MESSAGE (SEND_ERROR "gtk+-2.0 ${MESSAGE_NOT_FOUND}\n${MESSAGE_CHOOSE} gtk library.")
    ENDIF (NOT GTK2_FOUND)
    PKG_CHECK_MODULES (GTHREAD gthread-2.0)
    IF (NOT GTHREAD_FOUND)
        MESSAGE (SEND_ERROR "gthread-2.0 ${MESSAGE_NOT_FOUND}\n${MESSAGE_CHOOSE} gthread package.")
    ENDIF (NOT GTHREAD_FOUND)
ELSEIF (${OWBAL_PLATFORM_GRAPHICS} STREQUAL "SDL")
    PKG_CHECK_MODULES (SDL sdl)
    IF (NOT SDL_FOUND)
        MESSAGE (SEND_ERROR "sdl ${MESSAGE_NOT_FOUND}\n${MESSAGE_CHOOSE} sdl library.")
    ENDIF (NOT SDL_FOUND)
ENDIF (${OWBAL_PLATFORM_GRAPHICS} STREQUAL "GTK")

IF (WEBKIT_USE_DATABASE)
    PKG_CHECK_MODULES (SQLITE sqlite3)
    IF (NOT SQLITE_FOUND)
        MESSAGE (SEND_ERROR "sqlite3 ${MESSAGE_NOT_FOUND}\n${MESSAGE_DISABLE} WEBKIT_USE_DATABASE.")
    ENDIF (NOT SQLITE_FOUND)
ENDIF (WEBKIT_USE_DATABASE)

IF (NOT ${WEBKIT_USE_FONTS} STREQUAL "EMBEDDED")
    PKG_CHECK_MODULES (FREETYPE2 freetype2)
    IF (NOT FREETYPE2_FOUND)
        MESSAGE (SEND_ERROR "freetype2 ${MESSAGE_NOT_FOUND}\n${MESSAGE_CHOOSE} freetype library.")
    ENDIF (NOT FREETYPE2_FOUND)
    PKG_CHECK_MODULES (FONTCONFIG fontconfig)
    IF (NOT FONTCONFIG_FOUND)
        MESSAGE (SEND_ERROR "fontconfig ${MESSAGE_NOT_FOUND}\n${MESSAGE_CHOOSE} fontconfig library.")
    ENDIF (NOT FONTCONFIG_FOUND)
ENDIF (NOT ${WEBKIT_USE_FONTS} STREQUAL "EMBEDDED")

IF (WEBKIT_USE_HTML5_VIDEO AND ${OWBAL_PLATFORM_GRAPHICS} STREQUAL "GTK")
    PKG_CHECK_MODULES (GSTREAMER_VIDEO gstreamer-video-0.10>=0.10.17)
    IF (NOT GSTREAMER_VIDEO_FOUND)
        MESSAGE (SEND_ERROR "gstreamer-video >= 0.10.17 ${MESSAGE_NOT_FOUND}\n${MESSAGE_DISABLE} WEBKIT_USE_HTML5_VIDEO.")
    ENDIF (NOT GSTREAMER_VIDEO_FOUND)
    PKG_CHECK_MODULES (GNOMEVFS gnome-vfs-2.0)
    IF (NOT GNOMEVFS_FOUND)
        MESSAGE (SEND_ERROR "gnome-vfs-2.0 ${MESSAGE_NOT_FOUND}\n${MESSAGE_DISABLE} WEBKIT_USE_HTML5_VIDEO.")
    ENDIF (NOT GNOMEVFS_FOUND)
ENDIF (WEBKIT_USE_HTML5_VIDEO AND ${OWBAL_PLATFORM_GRAPHICS} STREQUAL "GTK")

IF (${WEBKIT_USE_I18N} STREQUAL "ICU")
    FIND_PACKAGE (ICU REQUIRED)
    IF (NOT ICU_FOUND)
        MESSAGE (SEND_ERROR "icu ${MESSAGE_NOT_FOUND}\n${MESSAGE_CHOOSE} icu package.")
    ENDIF (NOT ICU_FOUND)
ENDIF (${WEBKIT_USE_I18N} STREQUAL "ICU")

IF (WEBKIT_USE_NPAPI AND ${OWBAL_PLATFORM_GRAPHICS} STREQUAL "GTK")
    PKG_CHECK_MODULES (XT xt)
    IF (NOT XT_FOUND)
        MESSAGE (SEND_ERROR "xt ${MESSAGE_NOT_FOUND}\n${MESSAGE_CHOOSE} xt package.")
    ENDIF (NOT XT_FOUND)
ENDIF (WEBKIT_USE_NPAPI AND ${OWBAL_PLATFORM_GRAPHICS} STREQUAL "GTK")

IF (WEBKIT_USE_N800_HILDON)
    PKG_CHECK_MODULES (HILDON hildon-1)
    IF (NOT HILDON_FOUND)
        MESSAGE (SEND_ERROR "hildon-1 ${MESSAGE_NOT_FOUND}\n${MESSAGE_CHOOSE} hildon-1 library.")
    ENDIF (NOT HILDON_FOUND)
ENDIF (WEBKIT_USE_N800_HILDON)

#######################################
# Set global compilation flags        #
#######################################

ADD_DEFINITIONS(-DOWBAL=WebCore)
ADD_DEFINITIONS(-DWKAL=WebCore)
#ADD_DEFINITIONS (-DINSTRUMENT_LAYOUT_SCHEDULING=1)

ADD_DEFINITIONS (-DAPPLE_CHANGES=1)
ADD_DEFINITIONS (-DHAVE_FUNC_ISNAN)
ADD_DEFINITIONS (-D_THREAD_SAFE)
# FIXME: shouldn't -D__OWB__ be removed ?
ADD_DEFINITIONS (-D__OWB__)
ADD_DEFINITIONS (-DUSE_CONSERVATIVE_GC=0)
ADD_DEFINITIONS (-DD_MULTISCAN_FILES_SUPPORTED)
# FIXME: what about this flag and compilation for MAC or Win32?
ADD_DEFINITIONS (-DLINUX)
ADD_DEFINITIONS (-DWTF_CHANGES)
ADD_DEFINITIONS (-DWTF_USE_ICU_UNICODE=1)

IF (WEBKIT_ENABLE_XSLT)
    ADD_DEFINITIONS (-DENABLE_XSLT=1)
ENDIF (WEBKIT_ENABLE_XSLT)
IF (WEBKIT_ENABLE_XPATH)
    ADD_DEFINITIONS (-DENABLE_XPATH=1)
ENDIF (WEBKIT_ENABLE_XPATH)
ADD_DEFINITIONS (-DENABLE_XBL=0)

ADD_DEFINITIONS (-DWTF_USE_CURL=1)

ADD_DEFINITIONS (-DWTF_USE_JAVASCRIPTCORE_BINDINGS)
ADD_DEFINITIONS (-DHAVE_MMAP=1)

# FIXME
ADD_DEFINITIONS(-DENABLE_NETSCAPE_PLUGIN_API=1)

# FIXME: should not add this as soon as embedded font is possible
ADD_DEFINITIONS (-DUSE_FREETYPE=1)

IF (OWBAL_PLATFORM_MACPORT)
    SET (WEBKIT_USE_CC_PIC OFF CACHE BOOL "Compile WebKit with PIC support." FORCE)
    ADD_DEFINITIONS (-D__OWBAL_PLATFORM_MACPORT__)
    INCLUDE_DIRECTORIES (/opt/local/include)
    LINK_DIRECTORIES (/opt/local/lib)
ENDIF (OWBAL_PLATFORM_MACPORT)


IF (OWBAL_PLATFORM_GRAPHICS STREQUAL "GTK")
    ADD_DEFINITIONS (-DBUILDING_GTK__=1)
    ADD_DEFINITIONS (-DBUILDING_CAIRO__=1)
ELSEIF (OWBAL_PLATFORM_GRAPHICS STREQUAL "SDL")
    ADD_DEFINITIONS (-DWTF_PLATFORM_SDL=1)
    ADD_DEFINITIONS (-DWTF_PLATFORM_BAL=1)
ENDIF (OWBAL_PLATFORM_GRAPHICS STREQUAL "GTK")

IF (WEBKIT_ENABLE_INSPECTOR_CONTROLLER)
    ADD_DEFINITIONS (-DENABLE_INSPECTOR=1)
    ADD_DEFINITIONS (-DENABLE_JAVASCRIPT_DEBUGGER=1)
ELSE (WEBKIT_ENABLE_INSPECTOR_CONTROLLER)
    ADD_DEFINITIONS (-DENABLE_JAVASCRIPT_DEBUGGER=0)
ENDIF (WEBKIT_ENABLE_INSPECTOR_CONTROLLER)

IF (WEBKIT_USE_CC_PIC)
    ADD_DEFINITIONS (-fPIC)
    ADD_DEFINITIONS (-DPIC)
ENDIF (WEBKIT_USE_CC_PIC)

IF (NOT WEBKIT_USE_CC_EXCEPTIONS)
    ADD_DEFINITIONS (-fno-exceptions)
ENDIF (NOT WEBKIT_USE_CC_EXCEPTIONS)

IF (NOT WEBKIT_USE_CC_RTTI)
    ADD_DEFINITIONS (-fno-rtti)
ENDIF (NOT WEBKIT_USE_CC_RTTI)

IF (${WEBKIT_DEBUG} MATCHES "^DEBUG*")
    ADD_DEFINITIONS (-DENABLE_FTPDIR=1)
    ADD_DEFINITIONS (-W)
    ADD_DEFINITIONS (-Wall)
    ADD_DEFINITIONS (-DDEBUG_LAYOUTTEST)
    ADD_DEFINITIONS (-g)
    ADD_DEFINITIONS (-DBAL_LOG)
    ADD_DEFINITIONS (-Wno-unused-parameter)
    ADD_DEFINITIONS (-Wno-unused-variable)
    ADD_DEFINITIONS (-DUSE_SYSTEM_MALLOC)
ENDIF (${WEBKIT_DEBUG} MATCHES "^DEBUG*")
IF (${WEBKIT_DEBUG} STREQUAL "DEBUG_GCC3.X")
	ADD_DEFINITIONS (-funit-at-a-time)
ENDIF (${WEBKIT_DEBUG} STREQUAL "DEBUG_GCC3.X")
IF (${WEBKIT_DEBUG} STREQUAL "RELEASE")
	SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -DNDEBUG")
ENDIF (${WEBKIT_DEBUG} STREQUAL "RELEASE")

IF (WEBKIT_USE_NPAPI)
    ADD_DEFINITIONS (-DXP_UNIX)
    ADD_DEFINITIONS (-DWTF_USE_NPOBJECT)
ENDIF (WEBKIT_USE_NPAPI)

IF (WEBKIT_USE_SVG)
    ADD_DEFINITIONS (-DENABLE_SVG=1)
    ADD_DEFINITIONS (-DENABLE_SVG_USE=1)
    SET (SVG_FEATURES ${SVG_FEATURES} "ENABLE_SVG_USE=1")
    ADD_DEFINITIONS (-DENABLE_SVG_FOREIGN_OBJECT=1)
    SET (SVG_FEATURES ${SVG_FEATURES} "ENABLE_SVG_FOREIGN_OBJECT=1")
    ADD_DEFINITIONS (-DENABLE_SVG_FONTS=1)
    SET (SVG_FEATURES ${SVG_FEATURES} "ENABLE_SVG_FONTS=1")
    ADD_DEFINITIONS (-DENABLE_SVG_FILTERS=1)
    SET (SVG_FEATURES ${SVG_FEATURES} "ENABLE_SVG_FILTERS=1")
    ADD_DEFINITIONS (-DENABLE_SVG_AS_IMAGE=1)
    SET (SVG_FEATURES ${SVG_FEATURES} "ENABLE_SVG_AS_IMAGE=1")
    ADD_DEFINITIONS (-DENABLE_SVG_ANIMATION=1)
    SET (SVG_FEATURES ${SVG_FEATURES} "ENABLE_SVG_ANIMATION=1")
ENDIF (WEBKIT_USE_SVG)

IF (WEBKIT_USE_CROSS_DOCUMENT_MESSAGING)
    ADD_DEFINITIONS (-DENABLE_CROSS_DOCUMENT_MESSAGING=1)
ENDIF (WEBKIT_USE_CROSS_DOCUMENT_MESSAGING)

IF (WEBKIT_USE_DOM_STORAGE)
    ADD_DEFINITIONS (-DENABLE_DOM_STORAGE=1)
ENDIF (WEBKIT_USE_DOM_STORAGE)

IF (WEBKIT_USE_DATABASE)
    ADD_DEFINITIONS (-DENABLE_DATABASE=1 -DENABLE_ICONDATABASE=1)
ELSE (WEBKIT_USE_DATABASE)
    ADD_DEFINITIONS (-DENABLE_DATABASE=0 -DENABLE_ICONDATABASE=0)
ENDIF (WEBKIT_USE_DATABASE)

IF (WEBKIT_USE_HTML5_VIDEO)
    ADD_DEFINITIONS (-DENABLE_VIDEO=1)
ENDIF (WEBKIT_USE_HTML5_VIDEO)

IF (${WEBKIT_USE_THREADING} STREQUAL "PTHREADS")
    ADD_DEFINITIONS (-DWTF_USE_PTHREADS=1)
ENDIF (${WEBKIT_USE_THREADING} STREQUAL "PTHREADS")

IF (NOT ${WEBKIT_USE_I18N} STREQUAL "ICU")
    ADD_DEFINITIONS (-DWTF_USE_BALI18N=1)
ENDIF (NOT ${WEBKIT_USE_I18N} STREQUAL "ICU")

IF (NOT OWBAL_PLATFORM_MACPORT)
    ADD_DEFINITIONS (-pthread)
ENDIF (NOT OWBAL_PLATFORM_MACPORT)

IF (WEBKIT_OFFLINE_WEB_APPLICATIONS)
    ADD_DEFINITIONS (-DENABLE_OFFLINE_WEB_APPLICATIONS=1)
ENDIF (WEBKIT_OFFLINE_WEB_APPLICATIONS)

IF (WEBKIT_USE_WORKERS)
    ADD_DEFINITIONS (-DENABLE_WORKERS=1)
ENDIF (WEBKIT_USE_WORKERS)

IF (WEBKIT_USE_ACCESSIBILITY)
   ADD_DEFINITIONS (-DHAVE_ACCESSIBILITY=1)
ENDIF (WEBKIT_USE_ACCESSIBILITY)

IF (WEBKIT_USE_MULTIPLE_THREADS)
    ADD_DEFINITIONS (-DENABLE_JSC_MULTIPLE_THREADS=1)
    ADD_DEFINITIONS (-DHAVE_POSIX_MEMALIGN=1)
ENDIF (WEBKIT_USE_MULTIPLE_THREADS)

IF (WEBKIT_USE_WML)
    ADD_DEFINITIONS (-DENABLE_WML)
ENDIF (WEBKIT_USE_WML)

IF (WEBKIT_USE_SQUIRREL_FISH_EXTREM)
    ADD_DEFINITIONS (-DENABLE_JIT)
    ADD_DEFINITIONS (-DENABLE_WREC)
    ADD_DEFINITIONS (-DENABLE_JIT_OPTIMIZE_CALL=1)
    ADD_DEFINITIONS (-DENABLE_JIT_OPTIMIZE_PROPERTY_ACCESS=1)
    ADD_DEFINITIONS (-DENABLE_JIT_OPTIMIZE_ARITHMETIC=1)
ENDIF (WEBKIT_USE_SQUIRREL_FISH_EXTREM)

IF (WEBKIT_USE_WORKERS)
    ADD_DEFINITIONS (-DENABLE_WORKERS)
ENDIF (WEBKIT_USE_WORKERS)

IF (WEBKIT_USE_GEOLOCATION)
    ADD_DEFINITIONS (-DENABLE_GEOLOCATION=1)
ENDIF (WEBKIT_USE_GEOLOCATION)

#######################################
# DEEPSEE Stuff                       #
#######################################
OPTION (DEEPSEE_USE_FAKED_DEEPSEE "Use an existing faked_deepsee.h" ON)
SET (DEEPSEE_USE_FAKED_DEEPSEE_PATH "BAL/Includes/FakedDeepsee.h" CACHE STRING "Define your faked_deepsee.h path and name" )
# Include DeepSee cmake commands if available
INCLUDE (CMakeLists_deepseeProject.txt)
# If we don't use DeepSee, we can redefine few macros to have very basic warns:
IF (NOT DEEPSEE_ENABLE)
    SET (DEEPSEE_USE_FAKED_DEEPSEE_PATH "BAL/Includes/FakedDeepsee.h" CACHE STRING "Define your faked_deepsee.h path and name" )
    SET (DEEPSEE_FAKED_DEEPSEE.H ${DEEPSEE_USE_FAKED_DEEPSEE_PATH})
    OPTION (OWB_FAILSAFE_WITHOUT_DEEPSEE "Use custom assertion checks when DeepSee is disabled" ON)
    IF (OWB_FAILSAFE_WITHOUT_DEEPSEE)
        ADD_DEFINITIONS (-DOWB_FAILSAFE_WITHOUT_DEEPSEE)
    ENDIF (OWB_FAILSAFE_WITHOUT_DEEPSEE)
ENDIF (NOT DEEPSEE_ENABLE)


MACRO (OWBLN _in_FILE _dest_DIR _keep _noLink )
    EXECUTE_PROCESS (COMMAND ${CMAKE_SOURCE_DIR}/BAL/scripts/create_link.sh ${_in_FILE} ${_dest_DIR} ${_keep} ${CMAKE_CURRENT_SOURCE_DIR} ${_noLink}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}) 
ENDMACRO (OWBLN)

SET (EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
SET (LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)

INCLUDE (AddOns/CMakeLists.txt OPTIONAL)
INCLUDE (OrigynSuite/CMakeLists.txt OPTIONAL)
IF (EXISTS ${CMAKE_SOURCE_DIR}/HtmlExt)
    ADD_SUBDIRECTORY (HtmlExt)
ENDIF (EXISTS ${CMAKE_SOURCE_DIR}/HtmlExt)

IF (WEBKIT_USE_HTML_EXTENSION)
    ADD_DEFINITIONS (-D__HTML_EXT__)
ENDIF (WEBKIT_USE_HTML_EXTENSION)

ADD_SUBDIRECTORY (GeneratedSources)
ADD_SUBDIRECTORY (BAL)
ADD_SUBDIRECTORY (JavaScriptCore)
ADD_SUBDIRECTORY (WebCore)
ADD_SUBDIRECTORY (WebKit/OrigynWebBrowser)
ADD_SUBDIRECTORY (WebKitTools/OWBLauncher)

IF (COMPILE_TESTS)
    ADD_SUBDIRECTORY (WebKitTools/DumpRenderTree)
ENDIF (COMPILE_TESTS)

IF (OWBAL_PLATFORM_MACPORT)
    IF (WEBKIT_USE_ORIGYNSUITE)
        SET_TARGET_PROPERTIES (origynsuite PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
    ENDIF (WEBKIT_USE_ORIGYNSUITE)
    IF (WEBKIT_USE_DATABASE)
        SET_TARGET_PROPERTIES (bal-database PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
    ENDIF (WEBKIT_USE_DATABASE)
    IF (COMPILE_TESTS)
        SET_TARGET_PROPERTIES (
            owbaltests
            runOwbalTests 
            runWkalTests 
            wkaltests
            jscore
            PROPERTIES LINK_FLAGS "-undefined dynamic_lookup"
        )
    ENDIF (COMPILE_TESTS)

    SET_TARGET_PROPERTIES (
        bal-events
        bal-facilities
        bal-fonts
        bal-graphics
        bal-imagedecoder
        bal-internationalization
        bal-memory
        bal-media
        bal-network
        bal-types
        bal-widgets
        generated-sources
        jscore
        webcore-owb
        webkit
        owb
        PROPERTIES LINK_FLAGS "-undefined dynamic_lookup"
    )
ENDIF (OWBAL_PLATFORM_MACPORT)

