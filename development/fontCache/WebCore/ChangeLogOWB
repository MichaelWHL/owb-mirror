2008-10-28  Julien Chaffraix  <jchaffraix@pleyo.com>

        Reviewed by Mario Bensi.

        Ticket #151: FontPlatformDataMap should use raw pointers.

        - CSSFontFaceSource and CSSSegmentedFontFace now holds a strong reference on their
          FontData.

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::pruneTable): Removed deleteAllValues as
        clear() does the same now.

        (WebCore::CSSFontFaceSource::getFontData):
        * css/CSSFontFaceSource.h:
        * css/CSSFontSelector.cpp: Removed deleteAllValues as clear() does
        the same now.

        (WebCore::fontDataForGenericFamily):
        * css/CSSSegmentedFontFace.cpp:
        (WebCore::CSSSegmentedFontFace::pruneTable):
        (WebCore::CSSSegmentedFontFace::getFontData):
        * css/CSSSegmentedFontFace.h:

2008-10-23  Julien Chaffraix  <jchaffraix@pleyo.com>

        Reviewed by Mario Bensi.

        Made the FontCache methods returning FontPlatformData private.

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData):
        * css/CSSFontSelector.cpp:
        (WebCore::fontDataForGenericFamily):

2008-10-22  Julien Chaffraix  <jchaffraix@pleyo.com>

        Reviewed by Mario Bensi.

        Add an helper method to get the font cache (similar to WebCore::cache).

        * css/CSSFontFaceSource.cpp: Changed FontCache::fontCache()
        to fontCache().

        (WebCore::CSSFontFaceSource::getFontData):
        * css/CSSFontSelector.cpp: Ditto.
        (WebCore::CSSFontSelector::CSSFontSelector):
        (WebCore::CSSFontSelector::~CSSFontSelector):
        (WebCore::CSSFontSelector::addFontFaceRule):
        (WebCore::fontDataForGenericFamily):

2008-10-22  Mario Bensi  <mbensi@pleyo.com>

        Reviewed by Julien Chaffraix.
        FontCache refactoring

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData):
        * css/CSSFontSelector.cpp:
        (WebCore::CSSFontSelector::CSSFontSelector):
        (WebCore::CSSFontSelector::~CSSFontSelector):
        (WebCore::CSSFontSelector::addFontFaceRule):
        (WebCore::fontDataForGenericFamily):
        * loader/CachedFont.cpp:
        (WebCore::CachedFont::platformDataFromCustomData):
        * loader/CachedFont.h:

2008-10-08  Julien Chaffraix  <jchaffraix@pleyo.com>

        Reviewed by Mario Bensi.

        Remove unmatched stopCounting (it was causing an assertion
        failure under acid3).

        * dom/XMLTokenizer.cpp:
        (WebCore::):

2008-10-07  Julien Chaffraix  <jchaffraix@pleyo.com>

        Reviewed by Mario Bensi.

        Bug 21402: Add a clip in RenderView::layout to avoid doing offscreen paint

        We now add a clip to the viewPort size and offset. In our testing,
        this can be a good win on embedded devices.

        * rendering/RenderView.cpp:
        (WebCore::RenderView::layout):

2008-10-01  Julien Chaffraix  <jchaffraix@pleyo.com>

        Reviewed by Mario Bensi.

        Ticket #300: Add some probes to evaluate the OWB spends in each engine parts

        Add the TimeCounter class that implements two methods startCounting and stopCounting.
        It can handle recursive call for simplicity of use.

        The timing can be enabled with the BENCH_LOAD_TIME option. 

        **** Bear in mind that the results may overlap between the different parts and that
         there may be some overhead while timing. The best use is to use them as qualitative
         information on how the time is spend in the engine. ****
        
        * bindings/js/GCController.cpp:
        (WebCore::collect):
        (WebCore::GCController::gcTimerFired):
        (WebCore::GCController::garbageCollectNow):
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluate):
        Add a timer for the garbage collector.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseSheet):
        (WebCore::CSSParser::parseRule):
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::parseColor):
        (WebCore::CSSParser::parseSelector):
        (WebCore::CSSParser::parseDeclaration):
        (WebCore::CSSParser::parseMediaQuery):
        Add a timer for css parsing (all kind of parsing).

        * dom/Document.cpp:
        (WebCore::Document::recalcStyle):
        Add a timer for recalcStyle as it is a heavy operation.

        * dom/XMLTokenizer.cpp:
        (WebCore::XMLTokenizer::write):
        (WebCore::startElementNsHandler):
        (WebCore::endElementNsHandler):
        (WebCore::charactersHandler):
        (WebCore::processingInstructionHandler):
        (WebCore::cdataBlockHandler):
        (WebCore::commentHandler):
        (WebCore::warningHandler):
        (WebCore::fatalErrorHandler):
        (WebCore::normalErrorHandler):
        (WebCore::XMLTokenizer::end):
        (WebCore::):
        Add a timer for XML parsing.

        * html/HTMLTokenizer.cpp:
        (WebCore::HTMLTokenizer::write):
        (WebCore::HTMLTokenizer::end):
        (WebCore::HTMLTokenizer::processToken):
        Add a timer for HTML parsing.

        * rendering/RenderView.cpp:
        (WebCore::RenderView::layout):
        (WebCore::RenderView::paint):
        (WebCore::RenderView::repaintViewRectangle):
        Add a timer for painting the whole hierarchy starting from the RenderView (we will miss
        some local painting but it is here for a rought estimate).
